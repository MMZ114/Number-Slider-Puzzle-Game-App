/*
 * @class Type:  View Class
 * @description: This class aims to construct the GUI interface (Swing/JPanel) 
*                of windows frame.
 */

package numbersliderpuzzlegame.view;

import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.Timer;
import javax.swing.UIManager;
import numbersliderpuzzlegame.model.PuzzleModel;
import numbersliderpuzzlegame.util.DateTimeOperator;
import numbersliderpuzzlegame.util.FileOperator;

/**
 * project: A desktop based number sliding puzzle game application
 * email:   chenc5@andrew.cmu.edu
 * @author  Chen Chen
 * Created in 2016, at the University of Nottingham, UK  
 */

public class NumberSliderPuzzleGameMainFrame extends javax.swing.JFrame {

    /**
     * Constructor
     * <p> Initialisation of puzzle game model 
     * 
     * @throws IOException 
     */
    public NumberSliderPuzzleGameMainFrame() throws IOException {
        initComponents();
        // reset move and time elapsed
        movesResultLabel.setText(Integer.toString(PuzzleModel.get_move()));
        elapsedTimeResultLabel.setText(Double.toString(clockTime));
        
        // initialize program icon
        Image i =ImageIO.read(getClass().getResource("/res/app-icon.png"));
        this.setIconImage(i);
        
        // initialize current time display panel
        new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentTimeResultLabel.setText(DateTimeOperator.getCurrentDateTime());
                
                // get system information - convert to unit of MB
                availableMemoryResultLabel.setText(Integer.toString((int)(Runtime.getRuntime().freeMemory()>>20)));
                maxMemoryResultLabel.setText("/" + Integer.toString((int)(Runtime.getRuntime().maxMemory()>>20)));
            }
        }).start();
        
        // create a new timer
        gameTimer = new Timing();
        
        // after executing all constructors of created objects
        puzzleSizeResultTextField.setText(Integer.toString(PuzzleModel.get_puzzle_size()));
        PuzzleModel.set_shuffle_number((int)(numShuffleSlider.getValue() + 1) * 10);
        numShuffleResultTextField.setText(Integer.toString(PuzzleModel.get_shuffle_number()));
        
        // setup backup file
        FileOperator.setBackUpFile(this); // generate an empty backup file
        FileOperator.writeBackupFile("Puzzle Size\tNumber of Shuffles\tTime Used", this);
    } // end method

    /**
     * This method is called from within the constructor to initialized the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingPanel = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        resumeButton = new javax.swing.JButton();
        settingPanelTitle = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        showTimingButton = new javax.swing.JButton();
        notShowTimingButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        puzzleSizePromptLabel = new javax.swing.JLabel();
        puzzleSizeResultTextField = new javax.swing.JTextField();
        movesPromptLabel = new javax.swing.JLabel();
        movesResultLabel = new javax.swing.JLabel();
        elapsedTimePromptLabel = new javax.swing.JLabel();
        infoPanelTitle = new javax.swing.JLabel();
        numShufflePromptLabel = new javax.swing.JLabel();
        numShuffleResultTextField = new javax.swing.JTextField();
        numShuffleSlider = new javax.swing.JSlider();
        shuffleNumberSliderEasyLabel = new javax.swing.JLabel();
        shuffleNumberSliderHardLabel = new javax.swing.JLabel();
        currentTimePromptLabel = new javax.swing.JLabel();
        currentTimeResultLabel = new javax.swing.JLabel();
        availableMemoryPromptLabel = new javax.swing.JLabel();
        availableMemoryResultLabel = new javax.swing.JLabel();
        maxMemoryResultLabel = new javax.swing.JLabel();
        timeElapsedShaderPanel = new numbersliderpuzzlegame.view.TimeElapsedShaderPanel();
        elapsedTimeResultLabel = new javax.swing.JLabel();
        gamePanelTitle = new javax.swing.JLabel();
        gamePanelFrame = new javax.swing.JPanel();
        gamePanel = new numbersliderpuzzlegame.view.GamePanel();
        menuBar = new javax.swing.JMenuBar();
        actionMenu = new javax.swing.JMenu();
        saveMenu = new javax.swing.JMenuItem();
        sendMenu = new javax.swing.JMenuItem();
        printMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        quickGuideMenu = new javax.swing.JMenuItem();
        authorInformationMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Number Slider Puzzle Game");

        exitButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        resetButton.setText("Reset/Reshuffle");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        restartButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        restartButton.setText("Restart");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        pauseButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        resumeButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        resumeButton.setText("Resume");
        resumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeButtonActionPerformed(evt);
            }
        });

        settingPanelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        settingPanelTitle.setText("Setting Panel");

        saveButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        showTimingButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        showTimingButton.setText("Show Timing");
        showTimingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTimingButtonActionPerformed(evt);
            }
        });

        notShowTimingButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        notShowTimingButton.setText("Not Show Timing");
        notShowTimingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notShowTimingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingPanelLayout = new javax.swing.GroupLayout(settingPanel);
        settingPanel.setLayout(settingPanelLayout);
        settingPanelLayout.setHorizontalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(settingPanelLayout.createSequentialGroup()
                        .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(restartButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resetButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(111, 111, 111))
                    .addGroup(settingPanelLayout.createSequentialGroup()
                        .addComponent(notShowTimingButton, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                        .addGap(109, 109, 109)))
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(showTimingButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                    .addComponent(resumeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pauseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addComponent(settingPanelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        settingPanelLayout.setVerticalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingPanelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(notShowTimingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showTimingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(pauseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(restartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resumeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        puzzleSizePromptLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        puzzleSizePromptLabel.setText("Puzzle Size:");

        puzzleSizeResultTextField.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        puzzleSizeResultTextField.setText("2");
        puzzleSizeResultTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puzzleSizeResultTextFieldActionPerformed(evt);
            }
        });

        movesPromptLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        movesPromptLabel.setText("Moves:");

        movesResultLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        movesResultLabel.setText("Initializing...");

        elapsedTimePromptLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        elapsedTimePromptLabel.setText("Time Elapsed:");

        infoPanelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        infoPanelTitle.setText("Information Panel");

        numShufflePromptLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numShufflePromptLabel.setText("Number of Shuffles:");

        numShuffleResultTextField.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numShuffleResultTextField.setText("1000");
        numShuffleResultTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numShuffleResultTextFieldActionPerformed(evt);
            }
        });

        numShuffleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numShuffleSliderStateChanged(evt);
            }
        });

        shuffleNumberSliderEasyLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        shuffleNumberSliderEasyLabel.setText("Easy");

        shuffleNumberSliderHardLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        shuffleNumberSliderHardLabel.setText("Hard");

        currentTimePromptLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        currentTimePromptLabel.setText("Current Time (DD/MM/YY):");

        currentTimeResultLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        currentTimeResultLabel.setText("Initializing...");

        availableMemoryPromptLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        availableMemoryPromptLabel.setText("Available Memory (MB):");

        availableMemoryResultLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        availableMemoryResultLabel.setText("Initializing...");

        maxMemoryResultLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        maxMemoryResultLabel.setText("/Initializing...");

        elapsedTimeResultLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        elapsedTimeResultLabel.setText("Initializing...");

        javax.swing.GroupLayout timeElapsedShaderPanelLayout = new javax.swing.GroupLayout(timeElapsedShaderPanel);
        timeElapsedShaderPanel.setLayout(timeElapsedShaderPanelLayout);
        timeElapsedShaderPanelLayout.setHorizontalGroup(
            timeElapsedShaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeElapsedShaderPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(elapsedTimeResultLabel)
                .addContainerGap(144, Short.MAX_VALUE))
        );
        timeElapsedShaderPanelLayout.setVerticalGroup(
            timeElapsedShaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeElapsedShaderPanelLayout.createSequentialGroup()
                .addComponent(elapsedTimeResultLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoPanelTitle)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(puzzleSizePromptLabel)
                                            .addComponent(numShufflePromptLabel))
                                        .addGap(160, 160, 160))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                                        .addComponent(shuffleNumberSliderEasyLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(puzzleSizeResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numShuffleResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addComponent(numShuffleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(shuffleNumberSliderHardLabel))
                                    .addComponent(currentTimeResultLabel)
                                    .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addComponent(availableMemoryResultLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(maxMemoryResultLabel))))
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(elapsedTimePromptLabel)
                                .addGap(168, 168, 168)
                                .addComponent(timeElapsedShaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(availableMemoryPromptLabel)
                    .addComponent(currentTimePromptLabel)
                    .addComponent(movesPromptLabel)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(movesResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addComponent(infoPanelTitle)
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(puzzleSizePromptLabel)
                    .addComponent(puzzleSizeResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numShufflePromptLabel)
                    .addComponent(numShuffleResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numShuffleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shuffleNumberSliderHardLabel)
                            .addComponent(shuffleNumberSliderEasyLabel))
                        .addGap(20, 20, 20)))
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movesResultLabel)
                    .addComponent(movesPromptLabel))
                .addGap(13, 13, 13)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeElapsedShaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(elapsedTimePromptLabel))
                .addGap(20, 20, 20)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentTimeResultLabel)
                    .addComponent(currentTimePromptLabel))
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availableMemoryPromptLabel)
                    .addComponent(availableMemoryResultLabel)
                    .addComponent(maxMemoryResultLabel))
                .addContainerGap())
        );

        gamePanelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        gamePanelTitle.setText("Game Panel");

        gamePanelFrame.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));

        gamePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gamePanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout gamePanelFrameLayout = new javax.swing.GroupLayout(gamePanelFrame);
        gamePanelFrame.setLayout(gamePanelFrameLayout);
        gamePanelFrameLayout.setHorizontalGroup(
            gamePanelFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gamePanelFrameLayout.setVerticalGroup(
            gamePanelFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gamePanelFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        actionMenu.setText("File");

        saveMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/menu-icon/file-icon/save-icon.png"))); // NOI18N
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        actionMenu.add(saveMenu);

        sendMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/menu-icon/file-icon/send-icon.png"))); // NOI18N
        sendMenu.setText("Send");
        sendMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMenuActionPerformed(evt);
            }
        });
        actionMenu.add(sendMenu);

        printMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/menu-icon/file-icon/print-icon.png"))); // NOI18N
        printMenu.setText("Print");
        printMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuActionPerformed(evt);
            }
        });
        actionMenu.add(printMenu);

        exitMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/menu-icon/file-icon/exit-icon.png"))); // NOI18N
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        actionMenu.add(exitMenu);

        menuBar.add(actionMenu);

        aboutMenu.setText("About");

        quickGuideMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/menu-icon/about-icon/help-icon.png"))); // NOI18N
        quickGuideMenu.setText("User Guide");
        quickGuideMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickGuideMenuActionPerformed(evt);
            }
        });
        aboutMenu.add(quickGuideMenu);

        authorInformationMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/menu-icon/about-icon/about-icon.png"))); // NOI18N
        authorInformationMenu.setText("About");
        authorInformationMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorInformationMenuActionPerformed(evt);
            }
        });
        aboutMenu.add(authorInformationMenu);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gamePanelTitle)
                    .addComponent(gamePanelFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gamePanelTitle)
                        .addGap(29, 29, 29)
                        .addComponent(gamePanelFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Reset button event
     * 
     * @param evt 
     */
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // reset/reshuffle puzzle
        gamePanel.reset_reshuffle();
        puzzleSizeResultTextField.setText(Integer.toString(PuzzleModel.get_puzzle_size()));
        gamePanel.repaint();
        PuzzleModel.reset_max_move_count();
        movesResultLabel.setText(Integer.toString(PuzzleModel.get_max_move_count()));
        
        // reset timer
        gameTimer.resetTimer();
        gameTimer.stop();
        elapsedTimeResultLabel.setText(Double.toString(gameTimer.getClockTime()));
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * Puzzle size event
     * 
     * @param evt 
     */
    private void puzzleSizeResultTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puzzleSizeResultTextFieldActionPerformed
        // reset timer
        gameTimer.resetTimer();
        gameTimer.stop();
        elapsedTimeResultLabel.setText(Double.toString(gameTimer.getClockTime()));
        
        // exceptions handling - when input is not a valid number
        try {
            PuzzleModel.set_puzzle_size(Integer.parseInt(puzzleSizeResultTextField.getText()));
        }catch(NumberFormatException ecpt){
            puzzleSizelPromptTextFieldInputCheck(-1);         // error prompt
        }
        
        // error protection
        if(!puzzleSizelPromptTextFieldInputCheck(PuzzleModel.get_puzzle_size())) {
            PuzzleModel.set_puzzle_size(2);
        } // end if
 
        puzzleSizeResultTextField.setText(Integer.toString(PuzzleModel.get_puzzle_size()));
        gamePanel.createNewPuzzle(PuzzleModel.get_puzzle_size());
        gamePanel.repaint();
        
        // move count calculation
        PuzzleModel.reset_max_move_count();
        movesResultLabel.setText(Integer.toString(PuzzleModel.get_max_move_count()));
    }//GEN-LAST:event_puzzleSizeResultTextFieldActionPerformed

    /**
     * Exit button event
     * 
     * @param evt 
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        gameTimer.stop();
        if(exitProgramDialog()) System.exit(0);
        else gameTimer.start();
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Reset button event
     * 
     * @param evt 
     */
    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        // stop timer
        gameTimer.resetTimer();
        gameTimer.stop();
        elapsedTimeResultLabel.setText(Double.toString(gameTimer.getClockTime()));
        
        // restart/reshuffle
        gamePanel.restart();
        puzzleSizeResultTextField.setText(Integer.toString(PuzzleModel.get_puzzle_size()));
        movesResultLabel.setText(Integer.toString(PuzzleModel.get_max_move_count()));
    }//GEN-LAST:event_restartButtonActionPerformed
    
    /**
     * Game panel mouse pressed event
     * 
     * @param evt 
     */
    private void gamePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gamePanelMousePressed
        // update text field
        puzzleSizeResultTextField.setText(Integer.toString(PuzzleModel.get_puzzle_size()));
        movesResultLabel.setText(Integer.toString(PuzzleModel.get_max_move_count()));
        
        if(PuzzleModel.get_max_move_count() > 0) {
            gameTimer.start();
            elapsedTimeResultLabel.setText(Double.toString(gameTimer.getClockTime()));
        } // end if
        else{
            gameTimer.stop();
            gameTimer.resetTimer();
            elapsedTimeResultLabel.setText(Double.toString(gameTimer.getClockTime()));
        } // end else
        
        if(GamePanel.isCompleteCurrentGameFlag){
            // pop out dialog window showing game finished
            currentGameFinishedDialog();  

            if(PuzzleModel.get_puzzle_size() > 10) {
                // show error information
                Object[] options = {"Yes, please",
                    "No, I want to restart"};
                if(JOptionPane.showOptionDialog(this,
                            "Congratulations, you passed all game!\nDo you want to exit program?\nClick Yes to exit, click No to restart game from level 2.",
                            "You passed all games",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,     //do not use a custom Icon
                            options,  //the titles of buttons
                            options[0]) == 0) //default button title
                    System.exit(0);
                else
                    gamePanel.createNewPuzzle(2); // use default value
            } // end if
            
            GamePanel.isCompleteCurrentGameFlag = false; // reset flag
        } // end if
    }//GEN-LAST:event_gamePanelMousePressed

    /**
     * Pause button event
     * 
     * @param evt 
     */
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        gameTimer.timer.stop();
        NumberSliderPuzzleGameMainFrame.isPause = true;
        gamePanel.repaint();
    }//GEN-LAST:event_pauseButtonActionPerformed

    /**
     * Resume button event
     * 
     * @param evt 
     */
    private void resumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeButtonActionPerformed
        if(Integer.parseInt(movesResultLabel.getText())!=0) gameTimer.timer.start();
        NumberSliderPuzzleGameMainFrame.isPause = false;
        gamePanel.repaint();
    }//GEN-LAST:event_resumeButtonActionPerformed

    /**
     * User guide menu item
     * 
     * @param evt 
     */
    private void quickGuideMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickGuideMenuActionPerformed
        gameTimer.stop();
        Object[] objects = {UIManager.getIcon("OptionPane.information"),
                            "*****************************USER GUIDE*****************************",
                            "Puzzle Size: Number of rows and columns (input number should be within 2 to 10);",
                            "Number of Shuffles: the input number should be within 10 to 1010;",
                            "Time Elapsed: Second elapsed after first move;",
                            "Moves: Number of movements made;",
                            "Not Show Timing: Hide the elapsed time counter;",
                            "Show Timing: Show the elapsed time counter;",
                            "Reset/Reshuffle: Restart current game;",
                            "Restart: Restart game with level being set to 2;",
                            "Pause: Temporary stop the program and stop elapsed time counter;",
                            "Resume: Consume the game from last state;",
                            "Save: Save game results to seperated file (.txt);",
                            "Send: Launch email client;",
                            "Print: Print current view of game puzzle;",
                            "Exit: Safety terminate game and exit program;",
                            };
        // appear frame parent message
        JOptionPane.showMessageDialog(this, objects, 
                                     "Quick User Guide",
                                      JOptionPane.INFORMATION_MESSAGE);
        if(Integer.parseInt(movesResultLabel.getText()) > 0 && (!isPause)) gameTimer.start();
    }//GEN-LAST:event_quickGuideMenuActionPerformed

    /**
     * Software information event
     * 
     * @param evt 
     */
    private void authorInformationMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorInformationMenuActionPerformed
        gameTimer.stop();
        Object[] objects = {UIManager.getIcon("OptionPane.information"),
                            "*******************AUTHOR INFORMATION*******************",
                            "Author: Chen Chen",  
                            "Email: chenc5@andrew.cmu.edu",
                            "Project: Desktop Based Number Slider Puzzle Game Application"
                            };
        // appear frame parent message
        JOptionPane.showMessageDialog(this, objects, 
                                     "About",
                                      JOptionPane.INFORMATION_MESSAGE);
        if(Integer.parseInt(movesResultLabel.getText()) > 0 && (!isPause)) gameTimer.start();
    }//GEN-LAST:event_authorInformationMenuActionPerformed

    /**
     * Number of shuffle text field event
     * 
     * @param evt 
     */
    private void numShuffleResultTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numShuffleResultTextFieldActionPerformed
        // exceptions handling for invalid input
        try {
            PuzzleModel.set_shuffle_number(Integer.parseInt(numShuffleResultTextField.getText()));
        }catch(NumberFormatException ecpt){
            numShuffleTextFieldInputCheck(-1);
        }
        
        // error protection
        if(!numShuffleTextFieldInputCheck(PuzzleModel.get_shuffle_number())){
            PuzzleModel.set_shuffle_number(1010);
            numShuffleSlider.setValue(100);
        } else {
            numShuffleSlider.setValue((int)PuzzleModel.get_shuffle_number()/10 - 1);
        }
        
        // if no error occurred
        numShuffleResultTextField.setText(Integer.toString(PuzzleModel.get_shuffle_number()));
        GamePanel.puzzle_model.shuffleBlocks();
        gamePanel.repaint();
        
        // reset moves
        PuzzleModel.reset_move();
        movesResultLabel.setText(Integer.toString(PuzzleModel.get_move()));
        
        // restart timing 
        gameTimer.resetTimer();
        gameTimer.stop();
        elapsedTimeResultLabel.setText(Double.toString(gameTimer.getClockTime()));
    }//GEN-LAST:event_numShuffleResultTextFieldActionPerformed

    /**
     * Exit button event
     * 
     * @param evt 
     */
    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        gameTimer.stop();
        if(exitProgramDialog()) System.exit(0);
        else {
            if(Integer.parseInt(movesResultLabel.getText()) > 0 && isPause == false) gameTimer.start();
        } // end else
    }//GEN-LAST:event_exitMenuActionPerformed

    /**
     * Save button event
     * 
     * @param evt 
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(FileOperator.printFinalFile(this)){
            FileOperator.setBackUpFile(this); // generate an empty backup file
            FileOperator.writeBackupFile("Puzzle Size\tNumber of Shuffles\tTime Used", this);  
        } // end if
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * Print button event
     * 
     * @param evt 
     */
    private void printMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printMenuActionPerformed
        PrinterJob pj = PrinterJob.getPrinterJob();
        pj.setPrintable(gamePanel);
        if(pj.printDialog()) {
            try{
                pj.print();
            }catch(PrinterException e){
            }
        } // end if
    }//GEN-LAST:event_printMenuActionPerformed

    /**
     * Send button event
     * 
     * @param evt 
     */
    private void sendMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMenuActionPerformed
        // TODO add your handling code here:
        Desktop desktop;
        if(Desktop.isDesktopSupported()
                && (desktop = Desktop.getDesktop()).isSupported(Desktop.Action.MAIL)){
            try {
                desktop.mail();
            } catch (IOException ex){
                Object[] objects = {UIManager.getIcon("OptionPane.information"),
                                "Error: Mail client cannot be launched!",
                                "Press OK to continue!"};
 
                // appear frame parent message
                JOptionPane.showMessageDialog(this, objects, 
                                     "Send Error",
                                      JOptionPane.ERROR_MESSAGE);
            }
        } else {
            Object[] objects = {UIManager.getIcon("OptionPane.information"),
                                "Error: Mailing feature is not supported!",
                                "Press OK to continue!"};
 
            // appear frame parent message
            JOptionPane.showMessageDialog(this, objects, 
                                     "Send Error",
                                      JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_sendMenuActionPerformed

    /**
     * Save menu event
     * 
     * @param evt 
     */
    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        if(FileOperator.printFinalFile(this)){
            FileOperator.setBackUpFile(this); // generate an empty backup file
            FileOperator.writeBackupFile("Puzzle Size\tNumber of Shuffles\tTime Used", this);  
        }
    }//GEN-LAST:event_saveMenuActionPerformed

    /**
     * Number of shuffle slider event
     * 
     * @param evt 
     */
    private void numShuffleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numShuffleSliderStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        if(!source.getValueIsAdjusting()){
            PuzzleModel.set_shuffle_number((int)(source.getValue()+ 1) * 10);   // transfer value to system
            numShuffleResultTextField.setText(Integer.toString(PuzzleModel.get_shuffle_number()));
            GamePanel.puzzle_model.shuffleBlocks();
            gamePanel.repaint();
        
            // reset moves
            PuzzleModel.reset_move();
            movesResultLabel.setText(Integer.toString(PuzzleModel.get_move()));
        
            // restart timing 
            gameTimer.resetTimer();
            gameTimer.stop();
            elapsedTimeResultLabel.setText(Double.toString(gameTimer.getClockTime()));
        } // end if
    }//GEN-LAST:event_numShuffleSliderStateChanged

    /**
     * Show timing button event
     * 
     * @param evt 
     */
    private void showTimingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTimingButtonActionPerformed
        NumberSliderPuzzleGameMainFrame.isShadeElapseTimer = false;
        timeElapsedShaderPanel.repaint();
    }//GEN-LAST:event_showTimingButtonActionPerformed

    /**
     * Hide timing button event
     * 
     * @param evt 
     */
    private void notShowTimingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notShowTimingButtonActionPerformed
        NumberSliderPuzzleGameMainFrame.isShadeElapseTimer = true;
        timeElapsedShaderPanel.repaint();
    }//GEN-LAST:event_notShowTimingButtonActionPerformed
    
    /**
     * Pop out dialog message for exiting purpose
     * 
     * @return true if exit is selected
     */
    private boolean exitProgramDialog(){
        Object[] objects = {UIManager.getIcon("OptionPane.information"),
                            "Level/Puzzle Size: " + Integer.toString(PuzzleModel.get_puzzle_size()),
                            "No. of Moves: " + PuzzleModel.get_move(),
                            "Time Consumed: " + this.gameTimer.toString(),
                            "Press OK to exit program!"
                            };
 
        // appear frame parent message
        JOptionPane.showMessageDialog(this, objects, 
                                     "Your Results",
                                      JOptionPane.WARNING_MESSAGE);
        
        Object[] options = {"Yes, please",
                    "No, thanks"};
        int choice = JOptionPane.showOptionDialog(this,
                            "Are you sure to exit this program?",
                            "Program Exit Warning",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,     //do not use a custom Icon
                            options,  //the titles of buttons
                            options[0]); //default button title
        if(choice == 0) return true;
        else return false;
    } // end method
    
    /**
     * Pop out dialog message for finishing current round of game
     */
    private void currentGameFinishedDialog(){
        gameTimer.stop();
        
        // record achievement
        FileOperator.writeBackupFile("\r\n " 
                + Integer.toString(PuzzleModel.get_puzzle_size()-1) 
                + "\t\t  " 
                + Integer.toString(PuzzleModel.get_move()) 
                + "\t\t\t " 
                + Double.toString(PuzzleModel.get_time_consumed()), this);
        
        // prompt
        Object[] objects = {UIManager.getIcon("OptionPane.information"),
                            "Puzzle Size: " + Integer.toString(PuzzleModel.get_puzzle_size()-1),
                            "No. of Moves: " + PuzzleModel.get_move(),
                            "Time Consumed: " + PuzzleModel.get_time_consumed(),
                            "Press OK to continue next round!"
                            };
        // appear frame parent message
        JOptionPane.showMessageDialog(this, objects, 
                                     "Game Finished",
                                      JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Check whether input of puzzle size is valid (2~10)
     * 
     * @param input input number to puzzle size text field
     * @return whether input is valid
     */
    private boolean puzzleSizelPromptTextFieldInputCheck(int input) {
        if(input < 2 || input > 10) {
            gameTimer.stop();
            
            Object[] objects = {UIManager.getIcon("OptionPane.information"),
                            "**********Error!**********",
                            "Please input a number between 2 to 10!",
                            "The text field has now been reset to 2 (default value)"
                            };
            // appear frame parent message
            JOptionPane.showMessageDialog(this, objects, 
                                     "Input Error",
                                      JOptionPane.ERROR_MESSAGE);
            return false;
        } // end if
        else return true;
    } // end method
    
    /**
     * Check whether input of number of shuffles is valid (2~10)
     * 
     * @param input input number to number of shuffles text field
     * @return whether input is valid
     */
    private boolean numShuffleTextFieldInputCheck(int input){
        if(input < 10 || input > 1010) {
            gameTimer.stop();
            Object[] objects = {UIManager.getIcon("OptionPane.information"),
                            "**********Error!**********",
                            "Please input a number between 10 to 1010!",
                            "The text field has now been reset to 1010 (max value)"
                            };
            // appear frame parent message
            JOptionPane.showMessageDialog(this, objects, 
                                     "Input Error",
                                      JOptionPane.ERROR_MESSAGE);
            return false;
        } // end if
        else return true;
    } // end method
    
    /**
     * Inner class of elapsed time counter (in second)
     */
    public class Timing {
        private Timer timer;
        public static final int ONE_SEC = 1000;   //time step in milliseconds
        public static final int TENTH_SEC = 100;
        private int clockTick;                    //number of clock ticks; tick can be 1.0 s or 0.1 s
                                                  //time in seconds
        private String clockTimeString;
    
        /**
         * Constructor
         */
        public Timing() {
            clockTick = 0;                        //initial clock setting in clock ticks
            clockTime = ((double)clockTick)/10.0;

            clockTimeString = Double.toString(clockTime);

            timer = new Timer(TENTH_SEC, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    clockTick++;
                    clockTime = ((double)clockTick)/10.0;
                    clockTimeString = Double.toString(clockTime);  // use a float to represent the time
                    elapsedTimeResultLabel.setText(clockTimeString);
                }
            }); 
        } // end method
    
        /**
         * Getter
         * <p> Get elapsed time in second
         * 
         * @return elapsed time in second 
         */
        public double getClockTime(){
            return clockTime;
        } // end method

        /**
         * Reset elapsed time to 0
         */
        public void resetTimer(){
            clockTick = 0;
            clockTime = ((double)clockTick)/10.0;
            clockTimeString = Double.toString(clockTime);
        } // end method
    
        /**
         * Start counter
         */
        public void start(){
            timer.start();
        } // end method

        /**
         * Stop counter
         */
        public void stop(){
            timer.stop();
        } // end method
        
        /**
         * 
         * @return Get time in string format 
         */
        @Override
        public String toString(){
            return (Double.toString(clockTime));
        }
    } // end class
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NumberSliderPuzzleGameMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NumberSliderPuzzleGameMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NumberSliderPuzzleGameMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NumberSliderPuzzleGameMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new NumberSliderPuzzleGameMainFrame().setVisible(true);
                } catch (IOException ex) {
                    // fail to start when icon is not loaded
                    System.out.println("Fatal Error: Application icon cannot be found!");
                    Logger.getLogger(NumberSliderPuzzleGameMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    System.exit(0);
                }
            }
        });
    } // end method
    
    // default is set to 0, null, false
    public static double clockTime;
    public static boolean isPause;
    public static boolean isShadeElapseTimer;
    private final Timing gameTimer;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenu actionMenu;
    private javax.swing.JMenuItem authorInformationMenu;
    private javax.swing.JLabel availableMemoryPromptLabel;
    private javax.swing.JLabel availableMemoryResultLabel;
    private javax.swing.JLabel currentTimePromptLabel;
    private javax.swing.JLabel currentTimeResultLabel;
    private javax.swing.JLabel elapsedTimePromptLabel;
    private javax.swing.JLabel elapsedTimeResultLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JMenuItem exitMenu;
    private numbersliderpuzzlegame.view.GamePanel gamePanel;
    private javax.swing.JPanel gamePanelFrame;
    private javax.swing.JLabel gamePanelTitle;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel infoPanelTitle;
    private javax.swing.JLabel maxMemoryResultLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel movesPromptLabel;
    private javax.swing.JLabel movesResultLabel;
    private javax.swing.JButton notShowTimingButton;
    private javax.swing.JLabel numShufflePromptLabel;
    private javax.swing.JTextField numShuffleResultTextField;
    private javax.swing.JSlider numShuffleSlider;
    private javax.swing.JButton pauseButton;
    private javax.swing.JMenuItem printMenu;
    private javax.swing.JLabel puzzleSizePromptLabel;
    private javax.swing.JTextField puzzleSizeResultTextField;
    private javax.swing.JMenuItem quickGuideMenu;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton restartButton;
    private javax.swing.JButton resumeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JMenuItem sendMenu;
    private javax.swing.JPanel settingPanel;
    private javax.swing.JLabel settingPanelTitle;
    private javax.swing.JButton showTimingButton;
    private javax.swing.JLabel shuffleNumberSliderEasyLabel;
    private javax.swing.JLabel shuffleNumberSliderHardLabel;
    private numbersliderpuzzlegame.view.TimeElapsedShaderPanel timeElapsedShaderPanel;
    // End of variables declaration//GEN-END:variables
}
